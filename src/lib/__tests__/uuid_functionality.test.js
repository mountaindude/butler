import { jest } from '@jest/globals';
import { v4 as uuidv4, validate } from 'uuid';

describe('UUID functionality tests', () => {
    describe('uuidv4 generation', () => {
        test('should generate valid UUIDs', () => {
            const uuid1 = uuidv4();
            const uuid2 = uuidv4();

            // Should generate different UUIDs
            expect(uuid1).not.toBe(uuid2);

            // Should match UUID v4 format
            const uuidv4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            expect(uuid1).toMatch(uuidv4Regex);
            expect(uuid2).toMatch(uuidv4Regex);

            // Should be valid according to validate function
            expect(validate(uuid1)).toBe(true);
            expect(validate(uuid2)).toBe(true);
        });

        test('should generate UUIDs with version 4 identifier', () => {
            const uuid = uuidv4();

            // Version 4 UUIDs have '4' as the 13th character (after 3 hyphens)
            expect(uuid.charAt(14)).toBe('4');
        });

        test('should generate multiple unique UUIDs', () => {
            const uuids = new Set();
            const count = 100;

            for (let i = 0; i < count; i++) {
                uuids.add(uuidv4());
            }

            // All UUIDs should be unique
            expect(uuids.size).toBe(count);
        });
    });

    describe('UUID validation', () => {
        test('should validate valid UUIDs', () => {
            const validUuids = [
                '550e8400-e29b-41d4-a716-446655440000',
                'f47ac10b-58cc-4372-a567-0e02b2c3d479',
                '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
                '6ba7b811-9dad-11d1-80b4-00c04fd430c8',
            ];

            validUuids.forEach((uuid) => {
                const isValid = validate(uuid);
                if (!isValid) {
                    console.log(`UUID ${uuid} is not valid`);
                }
                expect(isValid).toBe(true);
            });
        });

        test('should reject invalid UUIDs', () => {
            const invalidUuids = [
                'invalid-uuid',
                '550e8400-e29b-41d4-a716', // too short
                '550e8400-e29b-41d4-a716-446655440000-extra', // too long
                '550e8400-e29b-41d4-a716-44665544000g', // invalid character
                '', // empty string
                null,
                undefined,
                123,
                {},
                [],
            ];

            invalidUuids.forEach((uuid) => {
                expect(validate(uuid)).toBe(false);
            });
        });

        test('should validate UUIDs generated by uuidv4', () => {
            for (let i = 0; i < 10; i++) {
                const uuid = uuidv4();
                expect(validate(uuid)).toBe(true);
            }
        });
    });

    describe('UUID format consistency', () => {
        test('should maintain consistent format with previous versions', () => {
            const uuid = uuidv4();

            // Should be 36 characters including hyphens
            expect(uuid.length).toBe(36);

            // Should have hyphens in the right positions
            expect(uuid.charAt(8)).toBe('-');
            expect(uuid.charAt(13)).toBe('-');
            expect(uuid.charAt(18)).toBe('-');
            expect(uuid.charAt(23)).toBe('-');

            // Should only contain valid hex characters and hyphens
            expect(uuid).toMatch(/^[0-9a-f-]+$/i);
        });

        test('should work with existing UUID patterns in codebase', () => {
            // Test UUID pattern similar to what's used in API schema examples
            const uuid = uuidv4();
            const apiSchemaPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;

            expect(uuid).toMatch(apiSchemaPattern);
        });
    });

    describe('Integration with scheduler functionality', () => {
        test('should generate valid IDs for schedules', () => {
            // Simulate scheduler functionality
            const newSchedule = {
                name: 'Test Schedule',
                cronSchedule: '*/5 * * * *',
                timezone: 'Europe/Stockholm',
                qlikSenseTaskId: '210832b5-6174-4572-bd19-3e61eda675ef',
                startupState: 'started',
            };

            // Add ID like the scheduler does
            newSchedule.id = uuidv4();
            newSchedule.created = new Date().toISOString();

            expect(newSchedule.id).toBeDefined();
            expect(validate(newSchedule.id)).toBe(true);
            expect(typeof newSchedule.id).toBe('string');
        });
    });

    describe('Performance considerations', () => {
        test('should generate UUIDs quickly', () => {
            const start = Date.now();
            const count = 1000;

            for (let i = 0; i < count; i++) {
                uuidv4();
            }

            const end = Date.now();
            const duration = end - start;

            // Should generate 1000 UUIDs in reasonable time (less than 100ms)
            expect(duration).toBeLessThan(100);
        });

        test('should validate UUIDs quickly', () => {
            const uuid = uuidv4();
            const start = Date.now();
            const count = 1000;

            for (let i = 0; i < count; i++) {
                validate(uuid);
            }

            const end = Date.now();
            const duration = end - start;

            // Should validate 1000 UUIDs in reasonable time (less than 50ms)
            expect(duration).toBeLessThan(50);
        });
    });
});
