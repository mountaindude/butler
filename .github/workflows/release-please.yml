name: release-please

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      release_tag_name: ${{ steps.release.outputs['src--tag_name'] }}
      release_upload_url: ${{ steps.release.outputs['src--upload_url'] }}
    env:
      GITHUB_REF: ${{ github.ref }}
      GITHUB_TOKEN: ${{ secrets.PAT }}
      DIST_FILE_NAME: butler
    steps:
      - name: Show github.ref
        run: echo "$GITHUB_REF"

      - uses: google-github-actions/release-please-action@v3
        id: release
        if: |
          github.repository_owner == 'ptarmiganlabs' 
          || github.repository_owner == 'mountaindude'
        with:
          command: manifest

      - name: Show output from Release-Please 3
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          echo "releases_created: ${{ steps.release.outputs.releases_created }}"
          echo "draft           : ${{ steps.release.outputs['src--draft'] }}"
          echo "path            : ${{ steps.release.outputs['src--path'] }}"
          echo "upload_url      : ${{ steps.release.outputs['src--upload_url'] }}"
          echo "html_url        : ${{ steps.release.outputs['src--html_url'] }}"
          echo "tag_name        : ${{ steps.release.outputs['src--tag_name'] }}"
          echo "version         : ${{ steps.release.outputs['src--version'] }}"
          echo "major           : ${{ steps.release.outputs['src--major'] }}"
          echo "minor           : ${{ steps.release.outputs['src--minor'] }}"
          echo "patch           : ${{ steps.release.outputs['src--patch'] }}"
          echo "sha             : ${{ steps.release.outputs['src--sha'] }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: What is current Node version
        run: |
          cd src
          node -v

      - name: Install dependencies
        run: |
          cd src
          node -v
          npm install

      - name: Install tool for creating stand-alone API html docs file
        run: |
          npm i -g @redocly/cli@latest

      - name: Generate latest API doc files and convert to standalone html. Also commit back to GitHub repo
        run: |
          pwd
          ls -la
          cd src
          node butler.js -c ./config/config-gen-api-docs.yaml --no-qs-connection & 
          sleep 20
          echo "...1"
          curl localhost:8081/documentation/json > ../docs/api_doc/butler-api.json
          echo "...4"
          curl localhost:8081/documentation/yaml > ../docs/api_doc/butler-api.yaml
          echo "...5"
          ls -la ../docs/api_doc
          npx @redocly/cli build-docs ../docs/api_doc/butler-api.yaml --output ../docs/api_doc/butler-api.html
          pkill -f 'node butler.js'
          git config --global user.name 'GitHub action'
          git config --global user.email 'mountaindude@users.noreply.github.com'
          git add ../docs/api_doc/butler-api.json
          git add ../docs/api_doc/butler-api.yaml
          git add ../docs/api_doc/butler-api.html
          git commit -m "Auto-adding API docs" --allow-empty
          git push

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        # uses: snyk/actions/node@0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=./src/package.json --sarif-file-output=snyk.sarif --severity-threshold=high
          # command: test
          
      - name: Upload Snyk result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      - name: Install tool for creating stand-alone executables
        if: ${{ steps.release.outputs.releases_created }}
        run: npm install -g pkg

      - name: Package stand-alone binaries
        if: ${{ steps.release.outputs.releases_created }}
          # mkdir release/alpine
        run: |
          pwd
          ls -la
          mkdir release
          mkdir release/macos
          mkdir release/win
          mkdir release/linux
          pkg src/butler.js --config src/package.json --output release/macos/${DIST_FILE_NAME} --targets node16-macos-x64 --compress GZip
          pkg src/butler.js --config src/package.json --output release/win/${DIST_FILE_NAME}.exe --targets node16-win-x64 --compress GZip
          pkg src/butler.js --config src/package.json --output release/linux/${DIST_FILE_NAME} --targets node16-linux-x64 --compress GZip

      - name: Debug
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          ls -la
          ls -la release
          ls -la release/macos
          ls -la release/win
          ls -la release/linux

      - name: Upload macOS build artifacts
        if: ${{ steps.release.outputs.releases_created }}
        uses: actions/upload-artifact@v3
        with:
          name: binaries-macos
          path: release/macos/*

      - name: Upload Linux build artifacts
        if: ${{ steps.release.outputs.releases_created }}
        uses: actions/upload-artifact@v3
        with:
          name: binaries-linux
          path: release/linux/*

      - name: Upload Windows build artifacts
        if: ${{ steps.release.outputs.releases_created }}
        uses: actions/upload-artifact@v3
        with:
          name: binaries-win
          path: release/win/*

  release-macos:
    needs: release-please
    runs-on:
      - self-hosted
      - x64
      - macos
      - sp53
    # timeout-minutes: 15

    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler
    steps:
      - name: Release tag and upload url from previous job
        run: |
          echo "tag_name   : ${{ needs.release-please.outputs.release_tag_name }}"
          echo "upload_url : ${{ needs.release-please.outputs.release_upload_url }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Download-Binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries-macos
          path: release-macos/

      - name: Make binary executable
        run: |
          chmod +x release-macos/${DIST_FILE_NAME}

      # Needed for GitHub hosted runner
      # For self-hosted runner the cert must either be installed manually, or the code below run once and then disabled.
      # - name: Import Code-Signing Certificates
      #   uses: Apple-Actions/import-codesign-certs@v1
      #   with:
      #     # The certificates in a PKCS12 file encoded as a base64 string
      #     p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
      #     # The password used to import the PKCS12 file.
      #     p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      # - name: Install gon via HomeBrew for code signing and app notarization
      #   run: |
      #     brew tap mitchellh/gon
      #     brew install mitchellh/gon/gon

      - name: Debug
        run: |
          ls -la
          ls -la ./release-macos

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          pwd
          ls -la
          gon ./release-config/gon.json

      - name: Change name of zip file
        run: |
          pwd
          ls -la
          ls -la ./release-macos
          mv ./${{ env.DIST_FILE_NAME }}-macos.zip ./${{ needs.release-please.outputs.release_tag_name }}-macos.zip

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: ./${{ needs.release-please.outputs.release_tag_name }}-macos.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          rm -r release-macos

  release-linux:
    needs: release-please
    runs-on: ubuntu-latest
    # timeout-minutes: 15

    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler
    steps:
      - name: Release tag and upload url from previous job
        run: |
          echo "tag_name   : ${{ needs.release-please.outputs.release_tag_name }}"
          echo "upload_url : ${{ needs.release-please.outputs.release_upload_url }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Download-Binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries-linux
          path: release-linux/

      - name: Make binary executable
        run: |
          chmod +x release-linux/${DIST_FILE_NAME}

      - name: Compress into zip
        run: |
          ls -la
          ls -la ./release-linux
          zip -9 -r ./${{ needs.release-please.outputs.release_tag_name }}-linux.zip release-linux/

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: ./${{ needs.release-please.outputs.release_tag_name }}-linux.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          rm -r release-linux

  release-win64:
    needs: release-please
    runs-on:
      - self-hosted
      - x64
      - windows
      - sp53
    # timeout-minutes: 15
    if: ${{ needs.release-please.outputs.releases_created }} 
    env:
      DIST_FILE_NAME: butler
    steps:
      - name: Release tag and upload url from previous job
        run: |
          Write-Output 'tag_name        : ${{ needs.release-please.outputs.release_tag_name }}'
          Write-Output 'upload_url      : ${{ needs.release-please.outputs.release_upload_url }}'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Download-Binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries-win
          path: release-win/

      - name: Sign the executable
        env:
          CODESIGN_PWD: ${{ secrets.WIN_CODESIGN_PWD}}
          CODESIGN_INTERMEDIATE_BASE64: ${{ secrets.WIN_CODESIGN_INTERMEDIATE_BASE64 }}
          CODESIGN_BASE64: ${{ secrets.WIN_CODESIGN_BASE64}}
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
          certutil -decode certificate\certificate.txt certificate\certificate.pfx
          Set-Content -Path certificate\intermediate.txt -Value $env:CODESIGN_INTERMEDIATE_BASE64
          certutil -decode certificate\intermediate.txt certificate\intermediate.crt

          & 'C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe' sign /fd SHA256 /p $env:CODESIGN_PWD /ac certificate\intermediate.crt /f certificate\certificate.pfx /tr "http://timestamp.sectigo.com/rfc3161" /td sha256 release-win/butler.exe
          
          Remove-Item -Recurse -Force certificate

      - name: Install dependencies and zip into release asset
        run: |
          cd release-win
          dir
          $compress = @{
            Path = "."
            CompressionLevel = "Fastest"
            DestinationPath = "${{ needs.release-please.outputs.release_tag_name }}-win.zip"
          }
          Compress-Archive @compress

      - name: Debug
        run: |
          dir
          dir ./release-win

      - name: Upload to existing release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          artifactContentType: raw
          # artifactContentType: application/zip
          draft: true
          tag: ${{ needs.release-please.outputs.release_tag_name }}
          artifacts: release-win/${{ needs.release-please.outputs.release_tag_name }}-win.zip
          token: ${{ github.token }}

      - name: Tidy up before existing
        run: |
          dir
          Remove-Item -path ./release-win -recurse 
